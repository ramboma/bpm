在出库时候需要查找资产的数量，例如200，但是这200来自入库表中的多条字段。那么出库时怎么选择
例如入库id为1的有100个；
入库id为2的有100个，然后选择这个资产，显示有200个，但是需要出库150个，那么出库表中productinputid填2条？
还是在出库表中去掉productinputid这个字段

书籍日志中就是单独一条记录作为借阅记录吧，不做出入标示，加入一个字段叫实际归还时间:w
图书和文档的方法都一样，看文档如果没有借阅就算了
接着做上传功能和设备查询，资料查询，消耗查询,用户及权限设计
维修流程
===============================================================================
保存设备信息的接口
#2 增加品名目录的子项方法
删除品名时要删除选中品名及其子项
更新品名时传入参数
保管人，来源，long
productinput 加保质期
===============================================================================
提交的格式:
{ApplyId:4,ApproveId:3,RelativeTask:2,ManagerId:1,data:[{ProductId:11,SaleCount:22}]}
返回：
{
    result:
    [
    {
        ProductInputId:,
        Shelf:'1',
        StorageNum:'2',
        Quantity:11
    },
    {
        ProductInputId:,
        Shelf:'2',
        StorageNum:'2',
        Quantity:21
    }
}
复合查询：
{productName:'机',factoryId:11,model:'',standard:'',source:33,storageNum :33,starttime:'',endtime:''}
返回值：
[
    {
        Id:333,
        Inout:1,
        Time:'2015/5/30',
        Quantity:30,
        AprrovalId:88,
        ApprovalName:'rambo',
        SourceId:888,
        SourceName:'军区'
    }
]

设备入库：
设备信息库需要加入三个字段：生产厂家：factoryName（字符串），供应商名称：salerName（字符串）,出厂日期：productTime

P:{equipmentName: '', factoryName: '', salerName: '', model: '', standard: '', source: '', price: '',
                updateTime: '',productTime: '', equipmentStatus: '', departMent: '', docPath: '', hasDelete: '',keeper:'' };
图书及电子文档管理：
图书及电子文档使用一个表，表结构如下：
id(自增加，主键),docname(文档名称),doctype(文档类型),author(作者),publisher(出版社),source(图书的来源，是自购，上级配发，个人),price(价格),readlevel(阅读级别：),keyword(关键词),content(内容简介),bookflag(标记是否为图书，0为图书，1为电子文档),location（文件路径及名称)，deleteFlag(删除标记，0表示没有删除，1表示删除)
图书借阅和文档借阅日志表：
(id自增加，主键),docid(文档的id号),applyid(借阅人id),approveid(批准人id),BorrowDays(借阅天数)，returntime(实际归还时间)。

增加人员信息表：
drop table Employee
CREATE TABLE [dbo].[Employee](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[DeptID] [bigint] NOT NULL,
	[Attribute] [bigint] not null,
	[Age] [bigint] NOT NULL,
        [AliasName] varchar(50) NOT NULL,
        [Password]  varchar(24) NOT NULL,
        [KeyString] varchar(128) NULL,
	[Sex] [bigint] NOT NULL,
	[TelNo] [varchar](50) NULL,
	[Rank] [bigint] NULL,
	[Remark] [varchar](100) NULL,
 CONSTRAINT [PK_Employee] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
增加部门信息表：

CREATE TABLE [dbo].[Department](
	[ID] [bigint] NOT NULL,
	[Name] [varchar](500) NOT NULL,
	[Parentid] [bigint] NOT NULL,
	[Remark] [varchar](100) NULL,
 CONSTRAINT [PK_Department1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

部门ID采用和物资品名表同样的含义，总共分三级：前两位11为根，（3---6）为二级部门，（7---8）为三级部门。


增加角色信息表：

CREATE TABLE [dbo].[Role](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NOT NULL,
	[EmployeeID] [bigint] NOT NULL,
	[AccessMask] [varchar](128) NULL,
	[Remark] [varchar](100) NULL,
 CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
角色信息表说明：
AccessMask：角色权限掩码，类型为字符串或者bigint（待定），如果为长度为64的字符串，对应系统有64个功能模块，0表示没有权限访问该模块，1表示有权限访问该模块。如果为bigint，含意同字符串。
//
1,菜单配置采用xml方式，用角色控制显示的菜单；用xml序列化后生成访问菜单；
2,把三个表和实体创建一下
设备查询
资料查询


2005年6月5日，关于流程数据库设计的一些思路

流程模板表，存放一个流程的基本信息，流程数据放到一个表内，叫流程数据表，流程的信息放到一个表内，叫流程信息表，流程主要靠流程信息表来控制它的运作和流转，还有一个表叫流程环节信息表。
1、流程模板表：流程名称，流程数据表名称，流程环节集合（字符串型，“环节id1，环节id2，环节id3，环节id4，环节id5”）等等。
2、流程数据表的字段根据流程内涉及的数据设计表。（这个表结合到具体流程了，一个流程是一个表）
3、流程信息表主要字段有：流程id，流程名称，流程创建时间，流程创建人，当前流程运行环节的id，流程对应页面名称，等等。
4、环节信息表主要字段有：环节id，环节处理角色id，环节名称，环节字段映射集合（字符串型，是一个json字符串，“【{标签名：‘字段名’}，{标签名：‘字段名’}。。】，其中字段名对应的是流程数据表中的字段），环节html代码，等等

系统配置的接口定义：

1、获取所有部门信息：c:‘sysconfig’,m:‘getalldepttree’ p:‘’
   返回：Result：[{id，name，remark}，{..}]
2、增加一个部门记录：c:‘sysconfig’，m:‘adddeptinfo’，p{parentid：‘11’，name：‘技术科’，ramark：‘’}
   返回：code：1，Result：null
3、更新一条部门记录：
     c:‘sysconfig’，m:‘updatedeptinfo，p{id：‘11’，name：‘技术科’，ramark：‘’}
      返回：code：1，Result：null
4、删除一条部门记录：c:’sysconfig‘，m:’deletedeptinfo‘，p{id：‘11’}
   返回：code：1，Result：null
5、获取所有人员信息：
   c:sysconfig，m:getallemplyeeinfo,p:''
   返回：Result：[{emplyeeDto}]这里deptid关联到deptment表的name
6：增加一条人员信息：
   c:sysconfig，m:addemplyeeinfo,p:{employee实体}

   返回：Result：null
7、更新一条人员记录：c:sysconfig，m：updateemployee，p：{employee实体}
8、删除一条人员记录：c:sysconfig，m：deleteemployee，p：{id：'11'}
9、获取所有角色信息：c:sysconfig,m:getallroleinfo,p:''
   返回Result：[{role实体}]  其中employeeid关联到employeeName
10、增加一条角色记录：c：sysconfig，m：addroleinfo，p：{role实体}
11、更新一条role记录：c：sysconfig，m：updateroleinfo，p：{role实体}
12、删除一条角色记录：c:sysconfig。m：deleteroleinfo，p：{id：’‘}
6.9日：
部门信息表
CREATE TABLE [dbo].[Department](
	[deptID] [bigint] IDENTITY(1,1) NOT NULL,
	[deptParentID] [bigint] NULL,
	[deptName] [varchar](500) NOT NULL,
	[deptRemark] [varchar](100) NULL,
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED 
(
	[deptID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

人员信息表：
CREATE TABLE [dbo].[Employee](
	[EmplID] [bigint] IDENTITY(1,1) NOT NULL,
	[EmplName] [varchar](50) NOT NULL,
	[DeptID] [bigint] NULL,
	[AliasName] [varchar](50) NOT NULL,
	[KeyString] [varchar](500) NULL,
	[Password] [varchar](50) NOT NULL,
	[Sex] [bigint] NULL,
	[Birthday] [datetime] NULL,
	[Attribute] [bigint] NULL,
	[Rank] [bigint] NULL,
	[TelNo] [varchar](50) NULL,
	[AccessMask] [bigint] NULL,
	[Remark] [varchar](100) NULL,
 CONSTRAINT [PK_Employee] PRIMARY KEY CLUSTERED 
(
	[EmplID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

角色信息表：

CREATE TABLE [dbo].[Role](
	[RoleID] [bigint] IDENTITY(1,1) NOT NULL,
	[RoleName] [varchar](100) NOT NULL,
	[EmplID] [bigint] NULL,
	[AccessMask] [bigint] NULL,
	[Remark] [varchar](100) NULL,
 CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED 
(
	[RoleID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

功能信息表：

CREATE TABLE [dbo].[Function](
	[FuncID] [bigint] IDENTITY(1,1) NOT NULL,
	[FuncName] [varchar](50) NOT NULL,
	[FuncCode] [int] NOT NULL,
	[FuncURL] [varchar](500) NOT NULL,
	[Remark] [varchar](100) NULL,
 CONSTRAINT [PK_Function] PRIMARY KEY CLUSTERED 
(
	[FuncID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
设备信息表：
CREATE TABLE [dbo].[Equipment](
	[EquipmentID] [bigint] IDENTITY(1,1) NOT NULL,
	[EquipmentName] [varchar](100) NULL,
	[Model] [varchar](500) NULL,
	[Standard] [varchar](100) NULL,
	[Source] [bigint] NULL,
	[Price] [float] NULL,
	[UpdateTime] [datetime] NULL,
	[EquipmentStatus] [varchar](50) NULL,
	[KeepDept] [bigint] NULL,
	[DocPath] [varchar](1000) NULL,
	[HasDelete] [tinyint] NULL,
	[KeepEmpl] [bigint] NULL,
	[FactoryName] [varchar](500) NULL,
	[SalerName] [varchar](500) NULL,
	[ProductTime] [datetime] NULL,
 CONSTRAINT [PK_EQUIPMENT] PRIMARY KEY CLUSTERED 
(
	[EquipmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]



